"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"],{

/***/ 2275:
/*!************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-picker-internal.entry.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_picker_internal": function() { return /* binding */ PickerInternal; }
/* harmony export */ });
/* harmony import */ var D_was_marine_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js */ 8069);
/* harmony import */ var D_was_marine_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass.js */ 8047);
/* harmony import */ var _index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-88bdeaae.js */ 9479);
/* harmony import */ var _helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers-4d272360.js */ 9158);



/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */


var pickerInternalIosCss = ":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}";
var pickerInternalMdCss = ":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}";

var PickerInternal = /*#__PURE__*/function () {
  function PickerInternal(hostRef) {
    var _this = this;

    (0,D_was_marine_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, PickerInternal);

    (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, hostRef);
    this.ionInputModeChange = (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.e)(this, "ionInputModeChange", 7);
    this.useInputMode = false;

    this.isInHighlightBounds = function (ev) {
      var highlightEl = _this.highlightEl;

      if (!highlightEl) {
        return false;
      }

      var bbox = highlightEl.getBoundingClientRect();
      /**
       * Check to see if the user clicked
       * outside the bounds of the highlight.
       */

      var outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;
      var outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;

      if (outsideX || outsideY) {
        return false;
      }

      return true;
    };
    /**
     * If we are no longer focused
     * on a picker column, then we should
     * exit input mode. An exception is made
     * for the input in the picker since having
     * that focused means we are still in input mode.
     */


    this.onFocusOut = function (ev) {
      var relatedTarget = ev.relatedTarget;

      if (!relatedTarget || relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== _this.inputEl) {
        _this.exitInputMode();
      }
    };
    /**
     * When picker columns receive focus
     * the parent picker needs to determine
     * whether to enter/exit input mode.
     */


    this.onFocusIn = function (ev) {
      var target = ev.target;
      /**
       * Due to browser differences in how/when focus
       * is dispatched on certain elements, we need to
       * make sure that this function only ever runs when
       * focusing a picker column.
       */

      if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {
        return;
      }
      /**
       * If we have actionOnClick
       * then this means the user focused
       * a picker column via mouse or
       * touch (i.e. a PointerEvent). As a result,
       * we should not enter/exit input mode
       * until the click event has fired, which happens
       * after the `focusin` event.
       *
       * Otherwise, the user likely focused
       * the column using their keyboard and
       * we should enter/exit input mode automatically.
       */


      if (!_this.actionOnClick) {
        var columnEl = target;
        var allowInput = columnEl.numericInput;

        if (allowInput) {
          _this.enterInputMode(columnEl, false);
        } else {
          _this.exitInputMode();
        }
      }
    };
    /**
     * On click we need to run an actionOnClick
     * function that has been set in onPointerDown
     * so that we enter/exit input mode correctly.
     */


    this.onClick = function () {
      var actionOnClick = _this.actionOnClick;

      if (actionOnClick) {
        actionOnClick();
        _this.actionOnClick = undefined;
      }
    };
    /**
     * Clicking a column also focuses the column on
     * certain browsers, so we use onPointerDown
     * to tell the onFocusIn function that users
     * are trying to click the column rather than
     * focus the column using the keyboard. When the
     * user completes the click, the onClick function
     * runs and runs the actionOnClick callback.
     */


    this.onPointerDown = function (ev) {
      var useInputMode = _this.useInputMode,
          inputModeColumn = _this.inputModeColumn,
          el = _this.el;

      if (_this.isInHighlightBounds(ev)) {
        /**
         * If we were already in
         * input mode, then we should determine
         * if we tapped a particular column and
         * should switch to input mode for
         * that specific column.
         */
        if (useInputMode) {
          /**
           * If we tapped a picker column
           * then we should either switch to input
           * mode for that column or all columns.
           * Otherwise we should exit input mode
           * since we just tapped the highlight and
           * not a column.
           */
          if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {
            /**
             * If user taps 2 different columns
             * then we should just switch to input mode
             * for the new column rather than switching to
             * input mode for all columns.
             */
            if (inputModeColumn && inputModeColumn === ev.target) {
              _this.actionOnClick = function () {
                _this.enterInputMode();
              };
            } else {
              _this.actionOnClick = function () {
                _this.enterInputMode(ev.target);
              };
            }
          } else {
            _this.actionOnClick = function () {
              _this.exitInputMode();
            };
          }
          /**
           * If we were not already in
           * input mode, then we should
           * enter input mode for all columns.
           */

        } else {
          /**
           * If there is only 1 numeric input column
           * then we should skip multi column input.
           */
          var columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');
          var columnEl = columns.length === 1 ? ev.target : undefined;

          _this.actionOnClick = function () {
            _this.enterInputMode(columnEl);
          };
        }

        return;
      }

      _this.actionOnClick = function () {
        _this.exitInputMode();
      };
    };
    /**
     * Enters input mode to allow
     * for text entry of numeric values.
     * If on mobile, we focus a hidden input
     * field so that the on screen keyboard
     * is brought up. When tabbing using a
     * keyboard, picker columns receive an outline
     * to indicate they are focused. As a result,
     * we should not focus the hidden input as it
     * would cause the outline to go away, preventing
     * users from having any visual indication of which
     * column is focused.
     */


    this.enterInputMode = function (columnEl) {
      var focusInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var inputEl = _this.inputEl,
          el = _this.el;

      if (!inputEl) {
        return;
      }
      /**
       * Only active input mode if there is at
       * least one column that accepts numeric input.
       */


      var hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');

      if (!hasInputColumn) {
        return;
      }
      /**
       * If columnEl is undefined then
       * it is assumed that all numeric pickers
       * are eligible for text entry.
       * (i.e. hour and minute columns)
       */


      _this.useInputMode = true;
      _this.inputModeColumn = columnEl;
      /**
       * Users with a keyboard and mouse can
       * activate input mode where the input is
       * focused as well as when it is not focused,
       * so we need to make sure we clean up any
       * old listeners.
       */

      if (focusInput) {
        if (_this.destroyKeypressListener) {
          _this.destroyKeypressListener();

          _this.destroyKeypressListener = undefined;
        }

        inputEl.focus();
      } else {
        el.addEventListener('keypress', _this.onKeyPress);

        _this.destroyKeypressListener = function () {
          el.removeEventListener('keypress', _this.onKeyPress);
        };
      }

      _this.emitInputModeChange();
    };

    this.exitInputMode = function () {
      var inputEl = _this.inputEl,
          useInputMode = _this.useInputMode;

      if (!useInputMode || !inputEl) {
        return;
      }

      _this.useInputMode = false;
      _this.inputModeColumn = undefined;
      inputEl.blur();
      inputEl.value = '';

      if (_this.destroyKeypressListener) {
        _this.destroyKeypressListener();

        _this.destroyKeypressListener = undefined;
      }

      _this.emitInputModeChange();
    };

    this.onKeyPress = function (ev) {
      var inputEl = _this.inputEl;

      if (!inputEl) {
        return;
      }

      var parsedValue = parseInt(ev.key, 10);
      /**
       * Only numbers should be allowed
       */

      if (!Number.isNaN(parsedValue)) {
        inputEl.value += ev.key;

        _this.onInputChange();
      }
    };

    this.selectSingleColumn = function () {
      var inputEl = _this.inputEl,
          inputModeColumn = _this.inputModeColumn,
          singleColumnSearchTimeout = _this.singleColumnSearchTimeout;

      if (!inputEl || !inputModeColumn) {
        return;
      }

      var values = inputModeColumn.items;
      /**
       * If users pause for a bit, the search
       * value should be reset similar to how a
       * <select> behaves. So typing "34", waiting,
       * then typing "5" should select "05".
       */

      if (singleColumnSearchTimeout) {
        clearTimeout(singleColumnSearchTimeout);
      }

      _this.singleColumnSearchTimeout = setTimeout(function () {
        inputEl.value = '';
        _this.singleColumnSearchTimeout = undefined;
      }, 1000);
      /**
       * For values that are longer than 2 digits long
       * we should shift the value over 1 character
       * to the left. So typing "456" would result in "56".
       * TODO: If we want to support more than just
       * time entry, we should update this value to be
       * the max length of all of the picker items.
       */

      if (inputEl.value.length >= 3) {
        var startIndex = inputEl.value.length - 2;
        var newString = inputEl.value.substring(startIndex);
        inputEl.value = newString;

        _this.selectSingleColumn();

        return;
      }
      /**
       * Checking the value of the input gets priority
       * first. For example, if the value of the input
       * is "1" and we entered "2", then the complete value
       * is "12" and we should select hour 12.
       *
       * Regex removes any leading zeros from values like "02".
       */


      var findItemFromCompleteValue = values.find(function (_ref) {
        var text = _ref.text;
        return text.replace(/^0+/, '') === inputEl.value;
      });

      if (findItemFromCompleteValue) {
        inputModeColumn.value = findItemFromCompleteValue.value;
        return;
      }
      /**
       * If we typed "56" to get minute 56, then typed "7",
       * we should select "07" as "567" is not a valid minute.
       */


      if (inputEl.value.length === 2) {
        var changedCharacter = inputEl.value.substring(inputEl.value.length - 1);
        inputEl.value = changedCharacter;

        _this.selectSingleColumn();
      }
    };
    /**
     * Searches a list of column items for a particular
     * value. This is currently used for numeric values.
     * The zeroBehavior can be set to account for leading
     * or trailing zeros when looking at the item text.
     */


    this.searchColumn = function (colEl, value) {
      var zeroBehavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'start';
      var behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;
      var item = colEl.items.find(function (_ref2) {
        var text = _ref2.text;
        return text.replace(behavior, '') === value;
      });

      if (item) {
        colEl.value = item.value;
      }
    };

    this.selectMultiColumn = function () {
      var inputEl = _this.inputEl,
          el = _this.el;

      if (!inputEl) {
        return;
      }

      var numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter(function (col) {
        return col.numericInput;
      });
      var firstColumn = numericPickers[0];
      var lastColumn = numericPickers[1];
      var value = inputEl.value;
      var minuteValue;

      switch (value.length) {
        case 1:
          _this.searchColumn(firstColumn, value);

          break;

        case 2:
          /**
           * If the first character is `0` or `1` it is
           * possible that users are trying to type `09`
           * or `11` into the hour field, so we should look
           * at that first.
           */
          var firstCharacter = inputEl.value.substring(0, 1);
          value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;

          _this.searchColumn(firstColumn, value);
          /**
           * If only checked the first value,
           * we can check the second value
           * for a match in the minutes column
           */


          if (value.length === 1) {
            minuteValue = inputEl.value.substring(inputEl.value.length - 1);

            _this.searchColumn(lastColumn, minuteValue, 'end');
          }

          break;

        case 3:
          /**
           * If the first character is `0` or `1` it is
           * possible that users are trying to type `09`
           * or `11` into the hour field, so we should look
           * at that first.
           */
          var firstCharacterAgain = inputEl.value.substring(0, 1);
          value = firstCharacterAgain === '0' || firstCharacterAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgain;

          _this.searchColumn(firstColumn, value);
          /**
           * If only checked the first value,
           * we can check the second value
           * for a match in the minutes column
           */


          minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);

          _this.searchColumn(lastColumn, minuteValue, 'end');

          break;

        case 4:
          /**
           * If the first character is `0` or `1` it is
           * possible that users are trying to type `09`
           * or `11` into the hour field, so we should look
           * at that first.
           */
          var firstCharacterAgainAgain = inputEl.value.substring(0, 1);
          value = firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgainAgain;

          _this.searchColumn(firstColumn, value);
          /**
           * If only checked the first value,
           * we can check the second value
           * for a match in the minutes column
           */


          var minuteValueAgain = value.length === 1 ? inputEl.value.substring(1, inputEl.value.length) : inputEl.value.substring(2, inputEl.value.length);

          _this.searchColumn(lastColumn, minuteValueAgain, 'end');

          break;

        default:
          var startIndex = inputEl.value.length - 4;
          var newString = inputEl.value.substring(startIndex);
          inputEl.value = newString;

          _this.selectMultiColumn();

          break;
      }
    };
    /**
     * Searches the value of the active column
     * to determine which value users are trying
     * to select
     */


    this.onInputChange = function () {
      var useInputMode = _this.useInputMode,
          inputEl = _this.inputEl,
          inputModeColumn = _this.inputModeColumn;

      if (!useInputMode || !inputEl) {
        return;
      }

      if (inputModeColumn) {
        _this.selectSingleColumn();
      } else {
        _this.selectMultiColumn();
      }
    };
    /**
     * Emit ionInputModeChange. Picker columns
     * listen for this event to determine whether
     * or not their column is "active" for text input.
     */


    this.emitInputModeChange = function () {
      var useInputMode = _this.useInputMode,
          inputModeColumn = _this.inputModeColumn;

      _this.ionInputModeChange.emit({
        useInputMode: useInputMode,
        inputModeColumn: inputModeColumn
      });
    };
  }

  (0,D_was_marine_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_1__["default"])(PickerInternal, [{
    key: "componentWillLoad",
    value: function componentWillLoad() {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.el).addEventListener('focusin', this.onFocusIn);
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.el).addEventListener('focusout', this.onFocusOut);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)(_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.H, {
        onPointerDown: function onPointerDown(ev) {
          return _this2.onPointerDown(ev);
        },
        onClick: function onClick() {
          return _this2.onClick();
        }
      }, (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)("input", {
        "aria-hidden": "true",
        tabindex: -1,
        inputmode: "numeric",
        type: "number",
        ref: function ref(el) {
          return _this2.inputEl = el;
        },
        onInput: function onInput() {
          return _this2.onInputChange();
        },
        onBlur: function onBlur() {
          return _this2.exitInputMode();
        }
      }), (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)("div", {
        class: "picker-before"
      }), (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)("div", {
        class: "picker-after"
      }), (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)("div", {
        class: "picker-highlight",
        ref: function ref(el) {
          return _this2.highlightEl = el;
        }
      }), (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.h)("slot", null));
    }
  }, {
    key: "el",
    get: function get() {
      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_2__.i)(this);
    }
  }]);

  return PickerInternal;
}();

PickerInternal.style = {
  ios: pickerInternalIosCss,
  md: pickerInternalMdCss
};


/***/ })

}]);
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js.js.map