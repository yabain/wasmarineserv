"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"],{

/***/ 9632:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_nav": function() { return /* binding */ Nav; },
/* harmony export */   "ion_nav_link": function() { return /* binding */ NavLink; }
/* harmony export */ });
/* harmony import */ var D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js */ 5106);
/* harmony import */ var D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js */ 8069);
/* harmony import */ var D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/createClass.js */ 8047);
/* harmony import */ var _index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-88bdeaae.js */ 9479);
/* harmony import */ var _ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ionic-global-00475c3a.js */ 537);
/* harmony import */ var _cubic_bezier_c313947a_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cubic-bezier-c313947a.js */ 1077);
/* harmony import */ var _helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers-4d272360.js */ 9158);
/* harmony import */ var _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-7e1d3e32.js */ 4736);
/* harmony import */ var _framework_delegate_ce4f806c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./framework-delegate-ce4f806c.js */ 2668);





function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */






var VIEW_STATE_NEW = 1;
var VIEW_STATE_ATTACHED = 2;
var VIEW_STATE_DESTROYED = 3;

var ViewController = /*#__PURE__*/function () {
  function ViewController(component, params) {
    (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, ViewController);

    this.component = component;
    this.params = params;
    this.state = VIEW_STATE_NEW;
  }

  (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__["default"])(ViewController, [{
    key: "init",
    value: function () {
      var _init = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(container) {
        var component;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.state = VIEW_STATE_ATTACHED;

                if (this.element) {
                  _context.next = 6;
                  break;
                }

                component = this.component;
                _context.next = 5;
                return (0,_framework_delegate_ce4f806c_js__WEBPACK_IMPORTED_MODULE_9__.a)(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);

              case 5:
                this.element = _context.sent;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
    /**
     * DOM WRITE
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');
      var element = this.element;

      if (element) {
        if (this.delegate) {
          this.delegate.removeViewFromDom(element.parentElement, element);
        } else {
          element.remove();
        }
      }

      this.nav = undefined;
      this.state = VIEW_STATE_DESTROYED;
    }
  }]);

  return ViewController;
}();

var matches = function matches(view, id, params) {
  if (!view) {
    return false;
  }

  if (view.component !== id) {
    return false;
  }

  return (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.s)(view.params, params);
};

var convertToView = function convertToView(page, params) {
  if (!page) {
    return null;
  }

  if (page instanceof ViewController) {
    return page;
  }

  return new ViewController(page, params);
};

var convertToViews = function convertToViews(pages) {
  return pages.map(function (page) {
    if (page instanceof ViewController) {
      return page;
    }

    if ('component' in page) {
      /**
       * TODO Ionic 6:
       * Consider switching to just using `undefined` here
       * as well as on the public interfaces and on
       * `NavComponentWithProps`. Previously `pages` was
       * of type `any[]` so TypeScript did not catch this.
       */
      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);
    }

    return convertToView(page, undefined);
  }).filter(function (v) {
    return v !== null;
  });
};

var navCss = ":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}";

var Nav = /*#__PURE__*/function () {
  function Nav(hostRef) {
    (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Nav);

    (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, "ionNavWillLoad", 7);
    this.ionNavWillChange = (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, "ionNavWillChange", 3);
    this.ionNavDidChange = (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.e)(this, "ionNavDidChange", 3);
    this.transInstr = [];
    this.animationEnabled = true;
    this.useRouter = false;
    this.isTransitioning = false;
    this.destroyed = false;
    this.views = [];
    /**
     * If `true`, the nav should animate the transition of components.
     */

    this.animated = true;
  }

  (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__["default"])(Nav, [{
    key: "swipeGestureChanged",
    value: function swipeGestureChanged() {
      if (this.gesture) {
        this.gesture.enable(this.swipeGesture === true);
      }
    }
  }, {
    key: "rootChanged",
    value: function rootChanged() {
      if (this.root !== undefined) {
        if (!this.useRouter) {
          this.setRoot(this.root, this.rootParams);
        }
      }
    }
  }, {
    key: "componentWillLoad",
    value: function componentWillLoad() {
      this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;

      if (this.swipeGesture === undefined) {
        var mode = (0,_ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__.b)(this);
        this.swipeGesture = _ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__.c.getBoolean('swipeBackEnabled', mode === 'ios');
      }

      this.ionNavWillLoad.emit();
    }
  }, {
    key: "componentDidLoad",
    value: function () {
      var _componentDidLoad = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.rootChanged();
                _context2.next = 3;
                return __webpack_require__.e(/*! import() */ "common").then(__webpack_require__.bind(__webpack_require__, /*! ./swipe-back-fa30a130.js */ 1812));

              case 3:
                this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));
                this.swipeGestureChanged();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function componentDidLoad() {
        return _componentDidLoad.apply(this, arguments);
      }

      return componentDidLoad;
    }()
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      var _iterator = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.views),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var view = _step.value;
          (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.l)(view.element, _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.d);

          view._destroy();
        } // Release swipe back gesture and transition.

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (this.gesture) {
        this.gesture.destroy();
        this.gesture = undefined;
      }

      this.transInstr.length = 0;
      this.views.length = 0;
      this.destroyed = true;
    }
    /**
     * Push a new component onto the current navigation stack. Pass any additional
     * information along as an object. This additional information is accessible
     * through NavParams.
     *
     * @param component The component to push onto the navigation stack.
     * @param componentProps Any properties of the component.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "push",
    value: function push(component, componentProps, opts, done) {
      return this.insert(-1, component, componentProps, opts, done);
    }
    /**
     * Inserts a component into the navigation stack at the specified index.
     * This is useful to add a component at any point in the navigation stack.
     *
     * @param insertIndex The index to insert the component at in the stack.
     * @param component The component to insert into the navigation stack.
     * @param componentProps Any properties of the component.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "insert",
    value: function insert(insertIndex, component, componentProps, opts, done) {
      return this.insertPages(insertIndex, [{
        component: component,
        componentProps: componentProps
      }], opts, done);
    }
    /**
     * Inserts an array of components into the navigation stack at the specified index.
     * The last component in the array will become instantiated as a view, and animate
     * in to become the active view.
     *
     * @param insertIndex The index to insert the components at in the stack.
     * @param insertComponents The components to insert into the navigation stack.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "insertPages",
    value: function insertPages(insertIndex, insertComponents, opts, done) {
      return this.queueTrns({
        insertStart: insertIndex,
        insertViews: insertComponents,
        opts: opts
      }, done);
    }
    /**
     * Pop a component off of the navigation stack. Navigates back from the current
     * component.
     *
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "pop",
    value: function pop(opts, done) {
      return this.removeIndex(-1, 1, opts, done);
    }
    /**
     * Pop to a specific index in the navigation stack.
     *
     * @param indexOrViewCtrl The index or view controller to pop to.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "popTo",
    value: function popTo(indexOrViewCtrl, opts, done) {
      var ti = {
        removeStart: -1,
        removeCount: -1,
        opts: opts
      };

      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {
        ti.removeView = indexOrViewCtrl;
        ti.removeStart = 1;
      } else if (typeof indexOrViewCtrl === 'number') {
        ti.removeStart = indexOrViewCtrl + 1;
      }

      return this.queueTrns(ti, done);
    }
    /**
     * Navigate back to the root of the stack, no matter how far back that is.
     *
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "popToRoot",
    value: function popToRoot(opts, done) {
      return this.removeIndex(1, -1, opts, done);
    }
    /**
     * Removes a component from the navigation stack at the specified index.
     *
     * @param startIndex The number to begin removal at.
     * @param removeCount The number of components to remove.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "removeIndex",
    value: function removeIndex(startIndex) {
      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var opts = arguments.length > 2 ? arguments[2] : undefined;
      var done = arguments.length > 3 ? arguments[3] : undefined;
      return this.queueTrns({
        removeStart: startIndex,
        removeCount: removeCount,
        opts: opts
      }, done);
    }
    /**
     * Set the root for the current navigation stack to a component.
     *
     * @param component The component to set as the root of the navigation stack.
     * @param componentProps Any properties of the component.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "setRoot",
    value: function setRoot(component, componentProps, opts, done) {
      return this.setPages([{
        component: component,
        componentProps: componentProps
      }], opts, done);
    }
    /**
     * Set the views of the current navigation stack and navigate to the last view.
     * By default animations are disabled, but they can be enabled by passing options
     * to the navigation controller. Navigation parameters can also be passed to the
     * individual pages in the array.
     *
     * @param views The list of views to set as the navigation stack.
     * @param opts The navigation options.
     * @param done The transition complete function.
     */

  }, {
    key: "setPages",
    value: function setPages(views, opts, done) {
      opts !== null && opts !== void 0 ? opts : opts = {}; // if animation wasn't set to true then default it to NOT animate

      if (opts.animated !== true) {
        opts.animated = false;
      }

      return this.queueTrns({
        insertStart: 0,
        insertViews: views,
        removeStart: 0,
        removeCount: -1,
        opts: opts
      }, done);
    }
    /**
     * Called by the router to update the view.
     *
     * @param id The component tag.
     * @param params The component params.
     * @param direction A direction hint.
     * @param animation an AnimationBuilder.
     *
     * @return the status.
     * @internal
     */

  }, {
    key: "setRouteId",
    value: function setRouteId(id, params, direction, animation) {
      var active = this.getActiveSync();

      if (matches(active, id, params)) {
        return Promise.resolve({
          changed: false,
          element: active.element
        });
      }

      var resolve;
      var promise = new Promise(function (r) {
        return resolve = r;
      });
      var finish;
      var commonOpts = {
        updateURL: false,
        viewIsReady: function viewIsReady(enteringEl) {
          var mark;
          var p = new Promise(function (r) {
            return mark = r;
          });
          resolve({
            changed: true,
            element: enteringEl,
            markVisible: function () {
              var _markVisible = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        mark();
                        _context3.next = 3;
                        return finish;

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              function markVisible() {
                return _markVisible.apply(this, arguments);
              }

              return markVisible;
            }()
          });
          return p;
        }
      };

      if (direction === 'root') {
        finish = this.setRoot(id, params, commonOpts);
      } else {
        // Look for a view matching the target in the view stack.
        var viewController = this.views.find(function (v) {
          return matches(v, id, params);
        });

        if (viewController) {
          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {
            direction: 'back',
            animationBuilder: animation
          }));
        } else if (direction === 'forward') {
          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {
            animationBuilder: animation
          }));
        } else if (direction === 'back') {
          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {
            direction: 'back',
            animated: true,
            animationBuilder: animation
          }));
        }
      }

      return promise;
    }
    /**
     * Called by <ion-router> to retrieve the current component.
     *
     * @internal
     */

  }, {
    key: "getRouteId",
    value: function () {
      var _getRouteId = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var active;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                active = this.getActiveSync();

                if (!active) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return", {
                  id: active.element.tagName,
                  params: active.params,
                  element: active.element
                });

              case 3:
                return _context4.abrupt("return", undefined);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getRouteId() {
        return _getRouteId.apply(this, arguments);
      }

      return getRouteId;
    }()
    /**
     * Get the active view.
     */

  }, {
    key: "getActive",
    value: function () {
      var _getActive = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", this.getActiveSync());

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getActive() {
        return _getActive.apply(this, arguments);
      }

      return getActive;
    }()
    /**
     * Get the view at the specified index.
     *
     * @param index The index of the view.
     */

  }, {
    key: "getByIndex",
    value: function () {
      var _getByIndex = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(index) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this.views[index]);

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getByIndex(_x2) {
        return _getByIndex.apply(this, arguments);
      }

      return getByIndex;
    }()
    /**
     * Returns `true` if the current view can go back.
     *
     * @param view The view to check.
     */

  }, {
    key: "canGoBack",
    value: function () {
      var _canGoBack = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(view) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this.canGoBackSync(view));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function canGoBack(_x3) {
        return _canGoBack.apply(this, arguments);
      }

      return canGoBack;
    }()
    /**
     * Get the previous view.
     *
     * @param view The view to get.
     */

  }, {
    key: "getPrevious",
    value: function () {
      var _getPrevious = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(view) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", this.getPreviousSync(view));

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getPrevious(_x4) {
        return _getPrevious.apply(this, arguments);
      }

      return getPrevious;
    }()
  }, {
    key: "getLength",
    value: function getLength() {
      return this.views.length;
    }
  }, {
    key: "getActiveSync",
    value: function getActiveSync() {
      return this.views[this.views.length - 1];
    }
  }, {
    key: "canGoBackSync",
    value: function canGoBackSync() {
      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();
      return !!(view && this.getPreviousSync(view));
    }
  }, {
    key: "getPreviousSync",
    value: function getPreviousSync() {
      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();

      if (!view) {
        return undefined;
      }

      var views = this.views;
      var index = views.indexOf(view);
      return index > 0 ? views[index - 1] : undefined;
    }
    /**
     * Adds a navigation stack change to the queue and schedules it to run.
     *
     * @returns Whether the transition succeeds.
     */

  }, {
    key: "queueTrns",
    value: function () {
      var _queueTrns = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(ti, done) {
        var _a, _b, promise, router, canTransition;

        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy))) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return", false);

              case 2:
                promise = new Promise(function (resolve, reject) {
                  ti.resolve = resolve;
                  ti.reject = reject;
                });
                ti.done = done;
                /**
                 * If using router, check to see if navigation hooks
                 * will allow us to perform this transition. This
                 * is required in order for hooks to work with
                 * the ion-back-button or swipe to go back.
                 */

                if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {
                  _context9.next = 15;
                  break;
                }

                router = document.querySelector('ion-router');

                if (!router) {
                  _context9.next = 15;
                  break;
                }

                _context9.next = 9;
                return router.canTransition();

              case 9:
                canTransition = _context9.sent;

                if (!(canTransition === false)) {
                  _context9.next = 12;
                  break;
                }

                return _context9.abrupt("return", false);

              case 12:
                if (!(typeof canTransition === 'string')) {
                  _context9.next = 15;
                  break;
                }

                router.push(canTransition, ti.opts.direction || 'back');
                return _context9.abrupt("return", false);

              case 15:
                // Normalize empty
                if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {
                  ti.insertViews = undefined;
                } // Enqueue transition instruction


                this.transInstr.push(ti); // if there isn't a transition already happening
                // then this will kick off this transition

                this.nextTrns();
                return _context9.abrupt("return", promise);

              case 19:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function queueTrns(_x5, _x6) {
        return _queueTrns.apply(this, arguments);
      }

      return queueTrns;
    }()
  }, {
    key: "success",
    value: function success(result, ti) {
      if (this.destroyed) {
        this.fireError('nav controller was destroyed', ti);
        return;
      }

      if (ti.done) {
        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);
      }

      ti.resolve(result.hasCompleted);

      if (ti.opts.updateURL !== false && this.useRouter) {
        var router = document.querySelector('ion-router');

        if (router) {
          var direction = result.direction === 'back' ? 'back' : 'forward';
          router.navChanged(direction);
        }
      }
    }
  }, {
    key: "failed",
    value: function failed(rejectReason, ti) {
      if (this.destroyed) {
        this.fireError('nav controller was destroyed', ti);
        return;
      }

      this.transInstr.length = 0;
      this.fireError(rejectReason, ti);
    }
  }, {
    key: "fireError",
    value: function fireError(rejectReason, ti) {
      if (ti.done) {
        ti.done(false, false, rejectReason);
      }

      if (ti.reject && !this.destroyed) {
        ti.reject(rejectReason);
      } else {
        ti.resolve(false);
      }
    }
    /**
     * Consumes the next transition in the queue.
     *
     * @returns whether the transition is executed.
     */

  }, {
    key: "nextTrns",
    value: function nextTrns() {
      // this is the framework's bread 'n butta function
      // only one transition is allowed at any given time
      if (this.isTransitioning) {
        return false;
      } // there is no transition happening right now, executes the next instructions.


      var ti = this.transInstr.shift();

      if (!ti) {
        return false;
      }

      this.runTransition(ti);
      return true;
    }
    /** Executes all the transition instruction from the queue. */

  }, {
    key: "runTransition",
    value: function () {
      var _runTransition = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(ti) {
        var leavingView, enteringView, requiresTransition, isBackDirection, result;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                // set that this nav is actively transitioning
                this.ionNavWillChange.emit();
                this.isTransitioning = true;
                this.prepareTI(ti);
                leavingView = this.getActiveSync();
                enteringView = this.getEnteringView(ti, leavingView);

                if (!(!leavingView && !enteringView)) {
                  _context10.next = 8;
                  break;
                }

                throw new Error('no views in the stack to be removed');

              case 8:
                if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {
                  _context10.next = 11;
                  break;
                }

                _context10.next = 11;
                return enteringView.init(this.el);

              case 11:
                this.postViewInit(enteringView, leavingView, ti); // Needs transition?

                requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;

                if (requiresTransition && ti.opts && leavingView) {
                  isBackDirection = ti.opts.direction === 'back';
                  /**
                   * If heading back, use the entering page's animation
                   * unless otherwise specified by the developer.
                   */

                  if (isBackDirection) {
                    ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);
                  }

                  leavingView.animationBuilder = ti.opts.animationBuilder;
                }

                if (!requiresTransition) {
                  _context10.next = 20;
                  break;
                }

                _context10.next = 17;
                return this.transition(enteringView, leavingView, ti);

              case 17:
                result = _context10.sent;
                _context10.next = 21;
                break;

              case 20:
                // transition is not required, so we are already done!
                // they're inserting/removing the views somewhere in the middle or
                // beginning, so visually nothing needs to animate/transition
                // resolve immediately because there's no animation that's happening
                result = {
                  hasCompleted: true,
                  requiresTransition: false
                };

              case 21:
                this.success(result, ti);
                this.ionNavDidChange.emit();
                _context10.next = 28;
                break;

              case 25:
                _context10.prev = 25;
                _context10.t0 = _context10["catch"](0);
                this.failed(_context10.t0, ti);

              case 28:
                this.isTransitioning = false;
                this.nextTrns();

              case 30:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[0, 25]]);
      }));

      function runTransition(_x7) {
        return _runTransition.apply(this, arguments);
      }

      return runTransition;
    }()
  }, {
    key: "prepareTI",
    value: function prepareTI(ti) {
      var _a, _b;

      var _c;

      var viewsLength = this.views.length;
      (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};
      (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;

      if (ti.removeView !== undefined) {
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(ti.removeStart !== undefined, 'removeView needs removeStart');
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(ti.removeCount !== undefined, 'removeView needs removeCount');
        var index = this.views.indexOf(ti.removeView);

        if (index < 0) {
          throw new Error('removeView was not found');
        }

        ti.removeStart += index;
      }

      if (ti.removeStart !== undefined) {
        if (ti.removeStart < 0) {
          ti.removeStart = viewsLength - 1;
        }

        if (ti.removeCount < 0) {
          ti.removeCount = viewsLength - ti.removeStart;
        }

        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;
      }

      if (ti.insertViews) {
        // allow -1 to be passed in to auto push it on the end
        // and clean up the index if it's larger then the size of the stack
        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {
          ti.insertStart = viewsLength;
        }

        ti.enteringRequiresTransition = ti.insertStart === viewsLength;
      }

      var insertViews = ti.insertViews;

      if (!insertViews) {
        return;
      }

      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(insertViews.length > 0, 'length can not be zero');
      var viewControllers = convertToViews(insertViews);

      if (viewControllers.length === 0) {
        throw new Error('invalid views to insert');
      } // Check all the inserted view are correct


      var _iterator2 = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"])(viewControllers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var view = _step2.value;
          view.delegate = ti.opts.delegate;
          var nav = view.nav;

          if (nav && nav !== this) {
            throw new Error('inserted view was already inserted');
          }

          if (view.state === VIEW_STATE_DESTROYED) {
            throw new Error('inserted view was already destroyed');
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      ti.insertViews = viewControllers;
    }
    /**
     * Returns the view that will be entered considering the transition instructions.
     *
     * @param ti The instructions.
     * @param leavingView The view being left or undefined if none.
     *
     * @returns The view that will be entered, undefined if none.
     */

  }, {
    key: "getEnteringView",
    value: function getEnteringView(ti, leavingView) {
      // The last inserted view will be entered when view are inserted.
      var insertViews = ti.insertViews;

      if (insertViews !== undefined) {
        return insertViews[insertViews.length - 1];
      } // When views are deleted, we will enter the last view that is not removed and not the view being left.


      var removeStart = ti.removeStart;

      if (removeStart !== undefined) {
        var views = this.views;
        var removeEnd = removeStart + ti.removeCount;

        for (var i = views.length - 1; i >= 0; i--) {
          var view = views[i];

          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {
            return view;
          }
        }
      }

      return undefined;
    }
    /**
     * Adds and Removes the views from the navigation stack.
     *
     * @param enteringView The view being entered.
     * @param leavingView The view being left.
     * @param ti The instructions.
     */

  }, {
    key: "postViewInit",
    value: function postViewInit(enteringView, leavingView, ti) {
      var _a, _b, _c;

      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(leavingView || enteringView, 'Both leavingView and enteringView are null');
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(ti.resolve, 'resolve must be valid');
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(ti.reject, 'reject must be valid'); // Compute the views to remove.

      var opts = ti.opts;
      var insertViews = ti.insertViews,
          removeStart = ti.removeStart,
          removeCount = ti.removeCount;
      /** Records the view to destroy */

      var destroyQueue; // there are views to remove

      if (removeStart !== undefined && removeCount !== undefined) {
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(removeStart >= 0, 'removeStart can not be negative');
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(removeCount >= 0, 'removeCount can not be negative');
        destroyQueue = [];

        for (var i = removeStart; i < removeStart + removeCount; i++) {
          var view = this.views[i];

          if (view && view !== enteringView && view !== leavingView) {
            destroyQueue.push(view);
          }
        } // default the direction to "back"


        (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';
      }

      var finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(finalNumViews >= 0, 'final balance can not be negative');

      if (finalNumViews === 0) {
        console.warn("You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.", this, this.el);
        throw new Error('navigation stack needs at least one root page');
      } // At this point the transition can not be rejected, any throw should be an error
      // Insert the new views in the stack.


      if (insertViews) {
        // add the views to the
        var insertIndex = ti.insertStart;

        var _iterator3 = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"])(insertViews),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _view = _step3.value;
            this.insertViewAt(_view, insertIndex);
            insertIndex++;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (ti.enteringRequiresTransition) {
          // default to forward if not already set
          (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';
        }
      } // if the views to be removed are in the beginning or middle
      // and there is not a view that needs to visually transition out
      // then just destroy them and don't transition anything
      // batch all of lifecycles together
      // let's make sure, callbacks are zoned


      if (destroyQueue && destroyQueue.length > 0) {
        var _iterator4 = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"])(destroyQueue),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _view2 = _step4.value;
            (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.l)(_view2.element, _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.b);
            (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.l)(_view2.element, _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.c);
            (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.l)(_view2.element, _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.d);
          } // once all lifecycle events has been delivered, we can safely detroy the views

        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var _iterator5 = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper_js__WEBPACK_IMPORTED_MODULE_0__["default"])(destroyQueue),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _view3 = _step5.value;
            this.destroyView(_view3);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
  }, {
    key: "transition",
    value: function () {
      var _transition2 = (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_1__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(enteringView, leavingView, ti) {
        var _this = this;

        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;

        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // we should animate (duration > 0) if the pushed page is not the first one (startup)
                // or if it is a portal (modal, actionsheet, etc.)
                opts = ti.opts;
                progressCallback = opts.progressAnimation ? function (ani) {
                  return _this.sbAni = ani;
                } : undefined;
                mode = (0,_ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__.b)(this);
                enteringEl = enteringView.element;
                leavingEl = leavingView && leavingView.element;
                animationOpts = Object.assign(Object.assign({
                  mode: mode,
                  showGoBack: this.canGoBackSync(enteringView),
                  baseEl: this.el,
                  progressCallback: progressCallback,
                  animated: this.animated && _ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__.c.getBoolean('animated', true),
                  enteringEl: enteringEl,
                  leavingEl: leavingEl
                }, opts), {
                  animationBuilder: opts.animationBuilder || this.animation || _ionic_global_00475c3a_js__WEBPACK_IMPORTED_MODULE_5__.c.get('navAnimation')
                });
                _context11.next = 8;
                return (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.t)(animationOpts);

              case 8:
                _yield$_transition = _context11.sent;
                hasCompleted = _yield$_transition.hasCompleted;
                return _context11.abrupt("return", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));

              case 11:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function transition(_x8, _x9, _x10) {
        return _transition2.apply(this, arguments);
      }

      return transition;
    }()
  }, {
    key: "transitionFinish",
    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {
      var cleanupView = hasCompleted ? enteringView : leavingView;

      if (cleanupView) {
        this.cleanup(cleanupView);
      }

      return {
        hasCompleted: hasCompleted,
        requiresTransition: true,
        enteringView: enteringView,
        leavingView: leavingView,
        direction: opts.direction
      };
    }
    /**
     * Inserts a view at the specified index.
     *
     * When the view already is in the stack it will be moved to the new position.
     *
     * @param view The view to insert.
     * @param index The index where to insert the view.
     */

  }, {
    key: "insertViewAt",
    value: function insertViewAt(view, index) {
      var views = this.views;
      var existingIndex = views.indexOf(view);

      if (existingIndex > -1) {
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(view.nav === this, 'view is not part of the nav'); // The view already in the stack, removes it.

        views.splice(existingIndex, 1); // and add it back at the requested index.

        views.splice(index, 0, view);
      } else {
        (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(!view.nav, 'nav is used'); // this is a new view to add to the stack
        // create the new entering view

        view.nav = this;
        views.splice(index, 0, view);
      }
    }
    /**
     * Removes a view from the stack.
     *
     * @param view The view to remove.
     */

  }, {
    key: "removeView",
    value: function removeView(view) {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');
      var views = this.views;
      var index = views.indexOf(view);
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_7__.n)(index > -1, 'view must be part of the stack');

      if (index >= 0) {
        views.splice(index, 1);
      }
    }
  }, {
    key: "destroyView",
    value: function destroyView(view) {
      view._destroy();

      this.removeView(view);
    }
    /**
     * DOM WRITE
     */

  }, {
    key: "cleanup",
    value: function cleanup(activeView) {
      // ok, cleanup time!! Destroy all of the views that are
      // INACTIVE and come after the active view
      // only do this if the views exist, though
      if (this.destroyed) {
        return;
      }

      var views = this.views;
      var activeViewIndex = views.indexOf(activeView);

      for (var i = views.length - 1; i >= 0; i--) {
        var view = views[i];
        /**
         * When inserting multiple views via insertPages
         * the last page will be transitioned to, but the
         * others will not be. As a result, a DOM element
         * will only be created for the last page inserted.
         * As a result, it is possible to have views in the
         * stack that do not have `view.element` yet.
         */

        var element = view.element;

        if (element) {
          if (i > activeViewIndex) {
            // this view comes after the active view
            // let's unload it
            (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.l)(element, _index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.d);
            this.destroyView(view);
          } else if (i < activeViewIndex) {
            // this view comes before the active view
            // and it is not a portal then ensure it is hidden
            (0,_index_7e1d3e32_js__WEBPACK_IMPORTED_MODULE_8__.s)(element, true);
          }
        }
      }
    }
  }, {
    key: "canStart",
    value: function canStart() {
      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();
    }
  }, {
    key: "onStart",
    value: function onStart() {
      this.pop({
        direction: 'back',
        progressAnimation: true
      });
    }
  }, {
    key: "onMove",
    value: function onMove(stepValue) {
      if (this.sbAni) {
        this.sbAni.progressStep(stepValue);
      }
    }
  }, {
    key: "onEnd",
    value: function onEnd(shouldComplete, stepValue, dur) {
      var _this2 = this;

      if (this.sbAni) {
        this.animationEnabled = false;
        this.sbAni.onFinish(function () {
          _this2.animationEnabled = true;
        }, {
          oneTimeCallback: true
        }); // Account for rounding errors in JS

        var newStepValue = shouldComplete ? -0.001 : 0.001;
        /**
         * Animation will be reversed here, so need to
         * reverse the easing curve as well
         *
         * Additionally, we need to account for the time relative
         * to the new easing curve, as `stepValue` is going to be given
         * in terms of a linear curve.
         */

        if (!shouldComplete) {
          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');
          newStepValue += (0,_cubic_bezier_c313947a_js__WEBPACK_IMPORTED_MODULE_6__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];
        } else {
          newStepValue += (0,_cubic_bezier_c313947a_js__WEBPACK_IMPORTED_MODULE_6__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];
        }

        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.h)("slot", null);
    }
  }, {
    key: "el",
    get: function get() {
      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.i)(this);
    }
  }], [{
    key: "watchers",
    get: function get() {
      return {
        "swipeGesture": ["swipeGestureChanged"],
        "root": ["rootChanged"]
      };
    }
  }]);

  return Nav;
}();

Nav.style = navCss;

var navLink = function navLink(el, routerDirection, component, componentProps, routerAnimation) {
  var nav = el.closest('ion-nav');

  if (nav) {
    if (routerDirection === 'forward') {
      if (component !== undefined) {
        return nav.push(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'root') {
      if (component !== undefined) {
        return nav.setRoot(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'back') {
      return nav.pop({
        skipIfBusy: true,
        animationBuilder: routerAnimation
      });
    }
  }

  return Promise.resolve(false);
};

var NavLink = /*#__PURE__*/function () {
  function NavLink(hostRef) {
    var _this3 = this;

    (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_classCallCheck_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, NavLink);

    (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.r)(this, hostRef);
    /**
     * The transition direction when navigating to another page.
     */

    this.routerDirection = 'forward';

    this.onClick = function () {
      return navLink(_this3.el, _this3.routerDirection, _this3.component, _this3.componentProps, _this3.routerAnimation);
    };
  }

  (0,D_YaBi_Frontend_main_node_modules_babel_runtime_helpers_esm_createClass_js__WEBPACK_IMPORTED_MODULE_3__["default"])(NavLink, [{
    key: "render",
    value: function render() {
      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.h)(_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.H, {
        onClick: this.onClick
      });
    }
  }, {
    key: "el",
    get: function get() {
      return (0,_index_88bdeaae_js__WEBPACK_IMPORTED_MODULE_4__.i)(this);
    }
  }]);

  return NavLink;
}();



/***/ })

}]);
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-nav_2_entry_js.js.map